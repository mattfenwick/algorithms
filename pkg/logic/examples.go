package logic

var (
	P = Var("P")
	Q = Var("Q")
	R = Var("R")
	S = Var("S")
)

type ProofsSection struct {
	Name   string
	Proofs []*Proof
}

func NewProofsSection(name string, proofs ...*Proof) *ProofsSection {
	return &ProofsSection{Name: name, Proofs: proofs}
}

var (
	pToP = NewRootProof(
		"P -> P",
		NewProofImplication(P, &Repeat{P}))

	notPAndNotP = NewRootProof("~ ( P ^ ~ P )",
		NewProofContradiction(
			And(P, Not(P)),
			EAnd(P, Not(P), true),
			EAnd(P, Not(P), false),
		))

	pOrNotP = NewRootProof("P v ~ P",
		NewProofContradiction(
			Not(Or(P, Not(P))),
			NewProofContradiction(
				P,
				IOr(P, Not(P), true),
				&Reiterate{Term: Not(Or(P, Not(P)))},
			),
			IOr(P, Not(P), false),
		),
		ENot(Or(P, Not(P))),
	)

	pAndPToP = NewRootProof("( P ^ P ) -> P",
		NewProofImplication(And(P, P),
			EAnd(P, P, true)),
	)

	pOrPToP = NewRootProof("( P v P ) -> P",
		NewProofImplication(Or(P, P),
			NewProofImplication(P, &Repeat{Term: P}),
			EOr(P, P, P)),
	)
)

var proofSections = []*ProofsSection{
	NewProofsSection("basics",
		pToP,
		notPAndNotP,
		pOrNotP,
		pAndPToP,
		// TODO P -> ( P ^ P )
		// TODO P -> ( P v P )
		// TODO P ^ Q -> P v Q
		pOrPToP,
	),
	NewProofsSection("arrows",
		NewRootProof("( P -> Q ) -> ( ~ Q -> ~ P )",
			NewProofImplication(
				Implication(P, Q),
				NewProofImplication(
					Not(Q),
					NewProofContradiction(
						P,
						&Reiterate{Term: Implication(P, Q)},
						EImply(P, Q),
						&Reiterate{Term: Not(Q)},
					),
				),
			),
		),
		NewRootProof("( ~ Q -> ~ P ) -> ( P -> Q )",
			NewProofImplication(
				Implication(Not(Q), Not(P)),
				NewProofImplication(
					P,
					NewProofContradiction(
						Not(Q),
						&Reiterate{Term: Implication(Not(Q), Not(P))},
						EImply(Not(Q), Not(P)),
						&Reiterate{Term: P},
					),
					ENot(Q),
				),
			),
		),
		NewRootProof("Q -> ( P -> Q )",
			NewProofImplication(
				Q,
				NewProofImplication(P,
					&Reiterate{Term: Q})),
		),
		NewRootProof("~ P -> ( P -> Q )",
			NewProofImplication(Not(P),
				NewProofImplication(Not(Q),
					&Reiterate{Not(P)},
				),
				NewProofImplication(P,
					NewProofContradiction(Not(Q),
						&Reiterate{Implication(Not(Q), Not(P))},
						&Reiterate{P},
						EImply(Not(Q), Not(P))),
					ENot(Q)),
			),
		),
		NewRootProof("( ( P -> Q ) ^ ( Q -> R ) ) -> ( P -> R )",
			NewProofImplication(And(Implication(P, Q), Implication(Q, R)),
				NewProofImplication(P,
					&Reiterate{Term: And(Implication(P, Q), Implication(Q, R))},
					EAnd(Implication(P, Q), Implication(Q, R), true),
					EAnd(Implication(P, Q), Implication(Q, R), false),
					EImply(P, Q),
					EImply(Q, R),
				)),
		),
		NewRootProof("( ( P ^ Q ) -> R ) -> ( P -> ( Q -> R ) )",
			NewProofImplication(Implication(And(P, Q), R),
				NewProofImplication(P,
					NewProofImplication(Q,
						&Reiterate{P},
						IAnd(P, Q),
						&Reiterate{Implication(And(P, Q), R)},
						EImply(And(P, Q), R),
					),
				),
			),
		),
		NewRootProof("( P -> ( Q -> R ) ) -> ( ( P ^ Q ) -> R )",
			NewProofImplication(Implication(P, Implication(Q, R)),
				NewProofImplication(And(P, Q),
					EAnd(P, Q, true),
					EAnd(P, Q, false),
					&Reiterate{Implication(P, Implication(Q, R))},
					EImply(P, Implication(Q, R)),
					EImply(Q, R),
				),
			),
		),
		NewRootProof("~ ( P -> Q ) -> ( P ^ ~ Q )",
			NewProofImplication(Not(Implication(P, Q)),
				NewProofContradiction(Not(P),
					NewProofImplication(Not(Q),
						&Reiterate{Not(P)},
					),
					NewProofImplication(P,
						NewProofContradiction(Not(Q),
							&Reiterate{Implication(Not(Q), Not(P))},
							&Reiterate{P},
							EImply(Not(Q), Not(P))),
						ENot(Q),
					),
					&Reiterate{Not(Implication(P, Q))},
				),
				ENot(P),
				NewProofContradiction(Q,
					NewProofImplication(P,
						&Reiterate{Q},
					),
					&Reiterate{Not(Implication(P, Q))},
				),
				IAnd(P, Not(Q)),
			),
		),
		NewRootProof("( P ^ ~ Q ) -> ~ ( P -> Q )",
			NewProofImplication(And(P, Not(Q)),
				NewProofContradiction(Implication(P, Q),
					&Reiterate{And(P, Not(Q))},
					EAnd(P, Not(Q), true),
					EAnd(P, Not(Q), false),
					EImply(P, Q),
				),
			),
		),
		// NewRootProof("( P -> Q ) -> ( ~ P v Q )",
		// 	NewProofImplication(Implication(P, Q),
		// 		NewProofImplication(P,
		// 			&Reiterate{Implication(P, Q)},
		// 			EImply(P, Q),
		// 			IOr(Not(P), Q, false),
		// 		),
		// 		NewProofImplication(Not(P),
		// 			IOr(Not(P), Q, true),
		// 		),
		// 		// P v ~ P
		// 		EOr(P, Not(P), Or(Not(P), Q)),
		// 	),
		// ),
		// NewRootProof("( ~ P v Q ) -> ( P -> Q )"),
		NewRootProof("( P v Q ) -> ( ~ P -> Q )",
			NewProofImplication(Or(P, Q),
				// Q -> ( ~ P -> Q )
				NewProofImplication(
					Q,
					NewProofImplication(Not(P),
						&Reiterate{Term: Q})),
				// P -> ( ~ P -> Q )
				NewProofImplication(P,
					NewProofImplication(Not(Q),
						&Reiterate{P},
					),
					NewProofImplication(Not(P),
						NewProofContradiction(Not(Q),
							&Reiterate{Implication(Not(Q), P)},
							&Reiterate{Not(P)},
							EImply(Not(Q), P)),
						ENot(Q)),
				),
				EOr(P, Q, Implication(Not(P), Q)),
			),
		),
		NewRootProof("( ~ P -> Q ) -> ( P v Q )",
			NewProofImplication(Implication(Not(P), Q),
				NewProofImplication(
					P,
					IOr(P, Q, true),
				),
				NewProofImplication(Not(P),
					&Reiterate{Implication(Not(P), Q)},
					EImply(Not(P), Q),
					IOr(P, Q, false),
				),
				NewProofContradiction(
					Not(Or(P, Not(P))),
					NewProofContradiction(
						P,
						IOr(P, Not(P), true),
						&Reiterate{Term: Not(Or(P, Not(P)))},
					),
					IOr(P, Not(P), false),
				),
				ENot(Or(P, Not(P))),
				EOr(P, Not(P), Or(P, Q)),
			),
		),
		NewRootProof("( ( P -> Q ) ^ ( P -> ~ Q ) ) -> ~ P",
			NewProofImplication(And(Implication(P, Q), Implication(P, Not(Q))),
				NewProofContradiction(P,
					&Reiterate{And(Implication(P, Q), Implication(P, Not(Q)))},
					EAnd(Implication(P, Q), Implication(P, Not(Q)), true),
					EAnd(Implication(P, Q), Implication(P, Not(Q)), false),
					EImply(P, Q),
					EImply(P, Not(Q)),
				),
			),
		),
		NewRootProof("( ( P -> Q ) ^ ( ~ P -> Q ) ) -> Q",
			NewProofImplication(And(Implication(P, Q), Implication(Not(P), Q)),
				EAnd(Implication(P, Q), Implication(Not(P), Q), true),
				EAnd(Implication(P, Q), Implication(Not(P), Q), false),
				NewProofContradiction(
					Not(Or(P, Not(P))),
					NewProofContradiction(
						P,
						IOr(P, Not(P), true),
						&Reiterate{Term: Not(Or(P, Not(P)))},
					),
					IOr(P, Not(P), false),
				),
				ENot(Or(P, Not(P))),
				EOr(P, Not(P), Q),
			),
		),
		NewRootProof("( P -> Q ) -> ( P -> ( Q v R ) )",
			NewProofImplication(Implication(P, Q),
				NewProofImplication(P,
					&Reiterate{Implication(P, Q)},
					EImply(P, Q),
					IOr(Q, R, true),
				),
			),
		),
		NewRootProof("( P -> R ) -> ( ( P ^ Q ) -> R )",
			NewProofImplication(Implication(P, R),
				NewProofImplication(And(P, Q),
					&Reiterate{Implication(P, R)},
					EAnd(P, Q, true),
					EImply(P, R),
				),
			),
		),
		// TODO ( P -> ( Q -> R ) ) -> (Q -> ( P -> R ) )
	),
	NewProofsSection("commutativity",
		NewRootProof("( P ^ Q ) -> ( Q ^ P )",
			NewProofImplication(
				And(P, Q),
				EAnd(P, Q, true),
				EAnd(P, Q, false),
				IAnd(Q, P),
			)),
		NewRootProof("( P v Q ) -> ( Q v P )",
			NewProofImplication(
				Or(P, Q),
				NewProofImplication(P,
					IOr(Q, P, false)),
				NewProofImplication(Q,
					IOr(Q, P, true)),
				EOr(P, Q, Or(Q, P)),
			)),
	),
	NewProofsSection("associativity",
		NewRootProof("( ( P ^ Q ) ^ R ) -> ( P ^ ( Q ^ R ) )",
			NewProofImplication(And(And(P, Q), R),
				EAnd(And(P, Q), R, true),
				EAnd(And(P, Q), R, false),
				EAnd(P, Q, true),
				EAnd(P, Q, false),
				IAnd(Q, R),
				IAnd(P, And(Q, R)),
			),
		),
		NewRootProof("( P ^ ( Q ^ R ) ) -> ( ( P ^ Q ) ^ R )",
			NewProofImplication(And(P, And(Q, R)),
				EAnd(P, And(Q, R), true),
				EAnd(P, And(Q, R), false),
				EAnd(Q, R, true),
				EAnd(Q, R, false),
				IAnd(P, Q),
				IAnd(And(P, Q), R),
			),
		),
		NewRootProof("( ( P v Q ) v R ) -> ( P v ( Q v R ) )",
			NewProofImplication(Or(Or(P, Q), R),
				NewProofImplication(Or(P, Q),
					NewProofImplication(P,
						IOr(P, Or(Q, R), true),
					),
					NewProofImplication(Q,
						IOr(Q, R, true),
						IOr(P, Or(Q, R), false),
					),
					EOr(P, Q, Or(P, Or(Q, R))),
				),
				NewProofImplication(R,
					IOr(Q, R, false),
					IOr(P, Or(Q, R), false),
				),
				EOr(Or(P, Q), R, Or(P, Or(Q, R))),
			),
		),
		NewRootProof("( P v ( Q v R ) ) -> ( ( P v Q ) v R )",
			NewProofImplication(Or(P, Or(Q, R)),
				NewProofImplication(P,
					IOr(P, Q, true),
					IOr(Or(P, Q), R, true),
				),
				NewProofImplication(Or(Q, R),
					NewProofImplication(Q,
						IOr(P, Q, false),
						IOr(Or(P, Q), R, true),
					),
					NewProofImplication(R,
						IOr(Or(P, Q), R, false),
					),
					EOr(Q, R, Or(Or(P, Q), R)),
				),
				EOr(P, Or(Q, R), Or(Or(P, Q), R)),
			),
		),
	),
	NewProofsSection("distributivity",
		// TODO ( ( P -> Q ) -> R ) -> ( ( P -> Q ) -> ( P -> R ) ) // TODO may be wrong ?
		// TODO ( ( P -> Q ) -> ( P -> R ) ) -> ( ( P -> Q ) -> R ) // TODO may be wrong ?
		// TODO ( P -> ( Q -> R ) ) -> ( ( P -> Q ) -> ( P -> R ) )
		// TODO ( ( P -> Q ) -> ( P -> R ) ) -> ( P -> ( Q -> R ) )
		NewRootProof("( P -> ( Q v R ) ) -> ( ( P -> Q ) v ( P -> R ) )",
			NewProofImplication(Implication(P, Or(Q, R)),
				NewProofImplication(P,
					&Reiterate{Implication(P, Or(Q, R))},
					EImply(P, Or(Q, R)),
					NewProofImplication(Q,
						&Reiterate{P},
						IImply(P, Q),
						IOr(Implication(P, Q), Implication(P, R), true),
					),
					NewProofImplication(R,
						&Reiterate{P},
						IImply(P, R),
						IOr(Implication(P, Q), Implication(P, R), false),
					),
					EOr(Q, R, Or(Implication(P, Q), Implication(P, R))),
				),
				NewProofImplication(Not(P),
					NewProofImplication(Not(Q),
						&Reiterate{Not(P)},
					),
					NewProofImplication(P,
						NewProofContradiction(Not(Q),
							&Reiterate{Implication(Not(Q), Not(P))},
							EImply(Not(Q), Not(P)),
							&Reiterate{P},
						),
						ENot(Q),
					),
					IOr(Implication(P, Q), Implication(P, R), true),
				),
				NewProofContradiction(
					Not(Or(P, Not(P))),
					NewProofContradiction(
						P,
						IOr(P, Not(P), true),
						&Reiterate{Term: Not(Or(P, Not(P)))},
					),
					IOr(P, Not(P), false),
				),
				ENot(Or(P, Not(P))),
				EOr(P, Not(P), Or(Implication(P, Q), Implication(P, R))),
			),
		),
		NewRootProof("( ( P -> Q ) v ( P -> R ) ) -> ( P -> ( Q v R ) )",
			NewProofImplication(Or(Implication(P, Q), Implication(P, R)),
				NewProofImplication(P,
					NewProofImplication(Implication(P, Q),
						&Reiterate{P},
						EImply(P, Q),
						IOr(Q, R, true),
					),
					NewProofImplication(Implication(P, R),
						&Reiterate{P},
						EImply(P, R),
						IOr(Q, R, false),
					),
					&Reiterate{Or(Implication(P, Q), Implication(P, R))},
					EOr(Implication(P, Q), Implication(P, R), Or(Q, R)),
				),
			),
		),
		NewRootProof("( P -> ( Q ^ R ) ) -> ( ( P -> Q ) ^ ( P -> R ) )",
			NewProofImplication(Implication(P, And(Q, R)),
				NewProofImplication(P,
					&Reiterate{Implication(P, And(Q, R))},
					EImply(P, And(Q, R)),
					EAnd(Q, R, true),
				),
				NewProofImplication(P,
					&Reiterate{Implication(P, And(Q, R))},
					EImply(P, And(Q, R)),
					EAnd(Q, R, false),
				),
				IAnd(Implication(P, Q), Implication(P, R)),
			),
		),
		NewRootProof("( ( P -> Q ) ^ ( P -> R ) ) -> ( P -> ( Q ^ R ) )",
			NewProofImplication(And(Implication(P, Q), Implication(P, R)),
				NewProofImplication(P,
					&Reiterate{And(Implication(P, Q), Implication(P, R))},
					EAnd(Implication(P, Q), Implication(P, R), true),
					EAnd(Implication(P, Q), Implication(P, R), false),
					EImply(P, Q),
					EImply(P, R),
					IAnd(Q, R),
				),
			),
		),
		NewRootProof("( P ^ ( Q v R ) ) -> ( ( P ^ Q ) v ( P ^ R ) )",
			NewProofImplication(And(P, Or(Q, R)),
				EAnd(P, Or(Q, R), true),
				EAnd(P, Or(Q, R), false),
				NewProofImplication(Q,
					&Reiterate{P},
					IAnd(P, Q),
					IOr(And(P, Q), And(P, R), true),
				),
				NewProofImplication(R,
					&Reiterate{P},
					IAnd(P, R),
					IOr(And(P, Q), And(P, R), false),
				),
				EOr(Q, R, Or(And(P, Q), And(P, R))),
			),
		),
		NewRootProof("( ( P ^ Q ) v ( P ^ R ) ) -> ( P ^ ( Q v R ) )",
			NewProofImplication(Or(And(P, Q), And(P, R)),
				NewProofImplication(And(P, Q),
					EAnd(P, Q, true),
					EAnd(P, Q, false),
					IOr(Q, R, true),
					IAnd(P, Or(Q, R)),
				),
				NewProofImplication(And(P, R),
					EAnd(P, R, true),
					EAnd(P, R, false),
					IOr(Q, R, false),
					IAnd(P, Or(Q, R)),
				),
				EOr(And(P, Q), And(P, R), And(P, Or(Q, R))),
			),
		),
		NewRootProof("( P v ( Q ^ R ) ) -> ( ( P v Q ) ^ ( P v R ) )",
			NewProofImplication(Or(P, And(Q, R)),
				NewProofImplication(P,
					IOr(P, Q, true),
					IOr(P, R, true),
					IAnd(Or(P, Q), Or(P, R)),
				),
				NewProofImplication(And(Q, R),
					EAnd(Q, R, true),
					EAnd(Q, R, false),
					IOr(P, Q, false),
					IOr(P, R, false),
					IAnd(Or(P, Q), Or(P, R)),
				),
				EOr(P, And(Q, R), And(Or(P, Q), Or(P, R))),
			),
		),
		NewRootProof("( ( P v Q ) ^ ( P v R ) ) -> ( P v ( Q ^ R ) )",
			NewProofImplication(And(Or(P, Q), Or(P, R)),
				EAnd(Or(P, Q), Or(P, R), true),
				EAnd(Or(P, Q), Or(P, R), false),
				NewProofImplication(P,
					IOr(P, And(Q, R), true),
				),
				// P -> ( ~ P -> Q )
				NewProofImplication(P,
					NewProofImplication(Not(Q),
						&Reiterate{P},
					),
					NewProofImplication(Not(P),
						NewProofContradiction(Not(Q),
							&Reiterate{Implication(Not(Q), P)},
							&Reiterate{Not(P)},
							EImply(Not(Q), P)),
						ENot(Q)),
				),
				// P -> ( ~ P -> R )
				NewProofImplication(P,
					NewProofImplication(Not(R),
						&Reiterate{P},
					),
					NewProofImplication(Not(P),
						NewProofContradiction(Not(R),
							&Reiterate{Implication(Not(R), P)},
							&Reiterate{Not(P)},
							EImply(Not(R), P)),
						ENot(R)),
				),
				NewProofImplication(Not(P),
					&Reiterate{Or(P, Q)},
					&Reiterate{Or(P, R)},
					// Q -> ( ~ P -> Q )
					NewProofImplication(
						Q,
						&Reiterate{Term: Not(P)},
						IImply(Not(P), Q)),
					&Reiterate{Implication(P, Implication(Not(P), Q))},
					EOr(P, Q, Implication(Not(P), Q)),
					EImply(Not(P), Q),
					// R -> ( ~ P -> R )
					NewProofImplication(
						R,
						&Reiterate{Term: Not(P)},
						IImply(Not(P), R)),
					&Reiterate{Implication(P, Implication(Not(P), R))},
					EOr(P, R, Implication(Not(P), R)),
					EImply(Not(P), R),
					IAnd(Q, R),
					IOr(P, And(Q, R), false),
				),
				NewProofContradiction(
					Not(Or(P, Not(P))),
					NewProofContradiction(
						P,
						IOr(P, Not(P), true),
						&Reiterate{Term: Not(Or(P, Not(P)))},
					),
					IOr(P, Not(P), false),
				),
				ENot(Or(P, Not(P))),
				EOr(P, Not(P), Or(P, And(Q, R))),
			),
		),
		NewRootProof("~ ( P v Q ) -> ( ~ P ^ ~ Q )",
			NewProofImplication(Not(Or(P, Q)),
				NewProofContradiction(P,
					IOr(P, Q, true),
					&Reiterate{Not(Or(P, Q))},
				),
				NewProofContradiction(Q,
					IOr(P, Q, false),
					&Reiterate{Not(Or(P, Q))},
				),
				IAnd(Not(P), Not(Q)),
			),
		),
		NewRootProof("( ~ P ^ ~ Q ) -> ~ ( P v Q )",
			NewProofImplication(And(Not(P), Not(Q)),
				NewProofImplication(P,
					NewProofContradiction(And(Not(P), Not(Q)),
						EAnd(Not(P), Not(Q), true),
						&Reiterate{P},
					),
				),
				NewProofImplication(Q,
					NewProofContradiction(And(Not(P), Not(Q)),
						EAnd(Not(P), Not(Q), false),
						&Reiterate{Q},
					),
				),
				NewProofContradiction(Or(P, Q),
					&Reiterate{Implication(P, Not(And(Not(P), Not(Q))))},
					&Reiterate{Implication(Q, Not(And(Not(P), Not(Q))))},
					EOr(P, Q, Not(And(Not(P), Not(Q)))),
					&Reiterate{And(Not(P), Not(Q))},
				),
			),
		),
		NewRootProof("~ ( P ^ Q ) -> ( ~ P v ~ Q )",
			NewProofImplication(Not(And(P, Q)),
				NewProofContradiction(Not(Or(Not(P), Not(Q))),
					NewProofContradiction(Not(P),
						IOr(Not(P), Not(Q), true),
						&Reiterate{Not(Or(Not(P), Not(Q)))},
					),
					ENot(P),
					NewProofContradiction(Not(Q),
						IOr(Not(P), Not(Q), false),
						&Reiterate{Not(Or(Not(P), Not(Q)))},
					),
					ENot(Q),
					IAnd(P, Q),
					&Reiterate{Not(And(P, Q))},
				),
				ENot(Or(Not(P), Not(Q))),
			),
		),
		NewRootProof("( ~ P v ~ Q ) -> ~ ( P ^ Q )",
			NewProofImplication(Or(Not(P), Not(Q)),
				NewProofImplication(Not(P),
					NewProofContradiction(And(P, Q),
						EAnd(P, Q, true),
						&Reiterate{Not(P)},
					),
				),
				NewProofImplication(Not(Q),
					NewProofContradiction(And(P, Q),
						EAnd(P, Q, false),
						&Reiterate{Not(Q)},
					),
				),
				EOr(Not(P), Not(Q), Not(And(P, Q))),
			),
		),
	),
	NewProofsSection("miscellaneous",
		NewRootProof("( ( ( P -> R ) ^ ( Q -> S ) ) ^ ( P v Q ) ) -> ( R v S )",
			NewProofImplication(And(And(Implication(P, R), Implication(Q, S)), Or(P, Q)),
				EAnd(And(Implication(P, R), Implication(Q, S)), Or(P, Q), true),
				EAnd(And(Implication(P, R), Implication(Q, S)), Or(P, Q), false),
				EAnd(Implication(P, R), Implication(Q, S), true),
				EAnd(Implication(P, R), Implication(Q, S), false),
				NewProofImplication(P,
					&Reiterate{Implication(P, R)},
					EImply(P, R),
					IOr(R, S, true),
				),
				NewProofImplication(Q,
					&Reiterate{Implication(Q, S)},
					EImply(Q, S),
					IOr(R, S, false),
				),
				EOr(P, Q, Or(R, S)),
			),
		),
	),
}
